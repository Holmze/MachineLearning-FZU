from sklearn.metrics import accuracy_score, normalized_mutual_info_score, adjusted_rand_scoreimport PIL.Image as Imagefrom sklearn.decomposition import PCAfrom sklearn.cluster import KMeansfrom clustering_performance import clusteringMetricsimport randomimport matplotlib.pyplot as pltimport numpy as npimport osfrom clustering_performance import clusteringMetricsIMAGES_PATH_DIR = os.getcwd() + r"\face_images\\"IMAGES_FORMAT = ['.jpg', '.py']IMAGE_SIZE = (200,180)IMAGE_ROW = 10IMAGE_COLUMN = 20def loadData(FileName):    im = Image.open(FileName)    im = im.convert('RGB')    return imdata_show = plt.figure(1)image_names = []image_vector = []real_label = sorted([_ for _ in range(0, 10)]*20)to_image = Image.new('RGB', (IMAGE_SIZE[1]*IMAGE_COLUMN, IMAGE_SIZE[0]*IMAGE_ROW))image_dir_names = [name for name in os.listdir(IMAGES_PATH_DIR) if os.path.splitext(name)[1] not in IMAGES_FORMAT ]# print(image_dir_names)for x, dir_name in enumerate(image_dir_names):    new_addr = IMAGES_PATH_DIR + dir_name + '\\'    image_names = [name for name in os.listdir(new_addr) if os.path.splitext(name)[1] in IMAGES_FORMAT ]    # print(image_names)            for y, _PATH in enumerate(image_names):        IMAGES_PATH = new_addr + _PATH        # print(IMAGES_PATH)                im = loadData(IMAGES_PATH)        image_vector.append(list(im.getdata()))image_vector = np.array(image_vector).ravel().reshape((200, -1))estimator = []# 读取完毕size, total_width, n = 10, 0.8, 3     # x个数，x单位宽度，单位宽度内类型个数for i in range(1, size+1):    Pca = PCA(n_components=i)    new_image_vector = Pca.fit_transform(image_vector)    km = KMeans(n_clusters=10)    pre_label = km.fit_predict(new_image_vector)    estimator.append(clusteringMetrics(real_label, pre_label))x = np.arange(size)width = total_width / nx = x - (total_width - width) / 2plt.bar(x, [_[0] for _ in estimator],  width=width, label='ACC',color='red', alpha=0.3, edgecolor='mediumvioletred', lw=3)plt.bar(x + width+0.04, [_[1] for _ in estimator], width=width, label='NMI',color='deepskyblue', alpha=0.3, edgecolor='midnightblue', lw=3)plt.bar(x + 2 * width+0.08, [_[2] for _ in estimator], width=width, label='ARI', color='green', alpha=0.3, edgecolor='mediumspringgreen', lw=3)for idx, item in enumerate(estimator):    plt.text(x[idx], item[0]+0.01, '%.2f'%item[0], ha='center', va='bottom', fontsize=8)    plt.text(x[idx]+width+0.04, item[1]+0.01, '%.2f'%item[1], ha='center', va='bottom', fontsize=8)    plt.text(x[idx]+width*2+0.08, item[2]+0.01, '%.2f'%item[2], ha='center', va='bottom', fontsize=8)plt.xticks()plt.yticks()plt.legend(loc="upper left")  # 防止label和图像重合显示不出来plt.ylabel('Value')plt.xlabel('Indicator (ACC,NMI,ARI)')# plt.rcParams['figure.figsize'] = (0.8, 10)  # 尺寸plt.title("Performance with different k")plt.show()